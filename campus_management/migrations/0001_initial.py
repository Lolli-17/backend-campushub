# Generated by Django 4.2.23 on 2025-07-28 14:30

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('role', models.CharField(choices=[('resident_manager', 'Resident Manager'), ('front_office_manager', 'Front Office Manager'), ('front_office', 'Front Office'), ('community_ambassador', 'Community Ambassador'), ('marketing', 'Marketing'), ('guest', 'Guest'), ('resident', 'Resident')], default='guest', max_length=30)),
                ('isFirstAccess', models.BooleanField(default=True)),
                ('phoneNumber', models.BigIntegerField(null=True)),
                ('balance', models.FloatField(default=0.0)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Campus',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('location', models.TextField()),
            ],
            options={
                'verbose_name_plural': 'campuses',
            },
        ),
        migrations.CreateModel(
            name='CommonArea',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=50)),
                ('cost', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Notifications',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('number', models.IntegerField()),
                ('campus', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campus_management.campus')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Space',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=20)),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campus_management.room')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Package',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('delivered', 'Delivered'), ('received', 'Received')], default='pending', max_length=20)),
                ('sender', models.CharField(max_length=50)),
                ('arrivalDate', models.DateField()),
                ('storage', models.CharField(max_length=20)),
                ('notes', models.TextField()),
                ('room', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='campus_management.room')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Guest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('delivered', 'Delivered'), ('received', 'Received')], default='pending', max_length=20)),
                ('document', models.CharField(max_length=50)),
                ('documentNumber', models.CharField(max_length=20)),
                ('nights', models.IntegerField()),
                ('room', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='campus_management.room')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FaultReport',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('delivered', 'Delivered'), ('received', 'Received')], default='pending', max_length=20)),
                ('reportDate', models.DateField()),
                ('faultType', models.CharField(choices=[('electrical', 'Electrical'), ('plumbing', 'Plumbing'), ('internet', 'Internet'), ('other', 'Other')], max_length=50)),
                ('notes', models.TextField()),
                ('room', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='campus_management.room')),
                ('space', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='campus_management.commonarea')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ElectricityMeter',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('delivered', 'Delivered'), ('received', 'Received')], default='pending', max_length=50)),
                ('electricityConsumption', models.IntegerField()),
                ('cost', models.FloatField()),
                ('readingDate', models.DateField()),
                ('resident', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('room', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='campus_management.room')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CommonAreaReservation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('delivered', 'Delivered'), ('received', 'Received')], default='pending', max_length=20)),
                ('reservationDate', models.DateField()),
                ('timeSlot', models.TimeField()),
                ('notes', models.TextField()),
                ('commonArea', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campus_management.commonarea')),
                ('room', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='campus_management.room')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CleaningReservation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('delivered', 'Delivered'), ('received', 'Received')], default='pending', max_length=20)),
                ('cleaningType', models.CharField(choices=[('standard', 'Standard'), ('deep', 'Deep'), ('express', 'Express')], max_length=50)),
                ('cost', models.FloatField()),
                ('requestDate', models.DateField()),
                ('timeSlot', models.TimeField()),
                ('notes', models.TextField()),
                ('room', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='campus_management.room')),
                ('space', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='campus_management.commonarea')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='customuser',
            name='campus',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='campus_management.campus'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
